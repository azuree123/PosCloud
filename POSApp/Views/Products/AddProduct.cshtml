@using POSApp.Core.Enums
@using POSApp.Core.Models
@model POSApp.Core.ViewModels.ProductCreateViewModel

@{
    Layout = null;
    AlertModel alertModel = (AlertModel)TempData["Alert"];
}

<div id="ordine" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    @{ string s = ViewBag.edit;}

    @using (Ajax.BeginForm(s, "Products", null, new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "CreateAssetSuccess"
    }
        , new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content ">
                <div class="modal-header modalheader">
                    <button type="button" class="close modalheader" data-dismiss="modal">×</button>

                    @if (s.Contains("Add"))
                    {
                        <h4 class="modal-title">
                            Add Product
                        </h4>
                    }
                    else
                    {
                        <h4 class="modal-title">
                            Edit Product
                        </h4>
                    }


                </div>
                <div class="modal-body">
                    <div class="panel panel-bd lobidrag">

                        <div class="panel-body">
                            @if (alertModel != null)
                            {
                                @Html.Partial("~/Views/Shared/_AlertView.cshtml", alertModel)
                            }
                            @Html.HiddenFor(a => a.Id)
                            @Html.HiddenFor(a => a.ProductCode)
                            @Html.HiddenFor(a => a.CreatedBy)
                            @Html.HiddenFor(a => a.CreatedOn)
                            @Html.HiddenFor(a => a.Image)
                            @Html.HiddenFor(a => a.StoreId)

                            <div class="">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="row">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = true, @placeholder = "Enter Name", autofocus = "" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Barcode, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Barcode" } })
                                            @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
                                        </div>


                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label required1" })
                                            <div class="input-group">
                                                @Html.DropDownListFor(model => model.CategoryId, Model.CategoryDdl, "Select an Option", new { @class = "form-control", @required = "true" })

                                                <span class="input-group-addon" style="">
                                                    <a href="@Url.Action("AddProductCategoryPartial", "Products")" class="modalShow1"><i class="fa fa-plus "></i></a>
                                                </span>

                                                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                            </div>

                                        </div>

                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group ">
                                        <div class="col-md-4">
                                            @Html.LabelFor(a => a.UnitId, htmlAttributes: new { @class = "control-label required1" })
                                            <div class="input-group">
                                                @Html.DropDownListFor(a => a.UnitId, Model.UnitDdl, "Select an Option", new { @class = "form-control", @required = "true" })
                                                <span class="input-group-addon">
                                                    <a href="@Url.Action("AddUnitPartial", "Setup")" class="modalShow4"> <i class="fa fa-plus "></i></a>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.CostPrice, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.CostPrice, new { htmlAttributes = new { @type = "number", @min = "0", @class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.CostPrice, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @type = "number", @min = "0", @class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="form-group">


                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @type = "number", @class = "form-control", @required = true, @placeholder = "Enter Stock" } })
                                            @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Attribute, htmlAttributes: new { @class = "control-label required1" })
                                            @Html.EditorFor(model => model.Attribute, new { htmlAttributes = new { @class = "form-control", @required = true, @placeholder = "Enter Attribute" } })
                                            @Html.ValidationMessageFor(model => model.Attribute, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.Label("Size", htmlAttributes: new { @class = "control-label required1" })
                                            <div class="input-group">
                                                @Html.DropDownListFor(a => a.Size, Model.SizeDdl, "Select an Option", new { @class = "form-control", @required = "true" })
                                                <span class="input-group-addon">
                                                    <a href="@Url.Action("AddSizePartial", "Setup")" class="modalShow5"> <i class="fa fa-plus "></i></a>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.LabelFor(a => a.SectionId, htmlAttributes: new { @class = "control-label required1" })
                                            <div class="input-group">
                                                @Html.DropDownListFor(a => a.SectionId, Model.SectionDdl, "Select an Option", new { @class = "form-control", @required = "true" })
                                                <span class="input-group-addon">
                                                    <a href="@Url.Action("AddSectionPartial", "Products")" class="modalShow3"> <i class="fa fa-plus "></i></a>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.SectionId, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label" })
                                            <input type="file" name="file" id="file" />
                                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })

                                        </div>
                                        @if (Model.Image != null)
                                        {
                                            <div class="col-md-4">
                                                @{

                                                    var base64 = Convert.ToBase64String(Model.Image);
                                                    var imgsrc = string.Format("data:image/jpg;base64,{0}", base64);
                                                }
                                                <img src='@imgsrc' width="69px" height="58px" />
                                            </div>
                                        }
                                    </div>
                                </div>


                                <hr/>
                                <div class="row">
                                    <div class="form-group">

                                        @Html.Label("Inventory Item", htmlAttributes: new { @class = "control-label col-xs-2" })
                                        @Html.EditorFor(model => model.InventoryItem, new { htmlAttributes = new { @class = " col-xs-2" } })
                                        @Html.ValidationMessageFor(model => model.InventoryItem, "", new { @class = "text-danger" })

                                        <div class="">
                                            @Html.Label("Purchase Item", htmlAttributes: new { @class = "control-label col-xs-2" })
                                            @Html.EditorFor(model => model.PurchaseItem, new { htmlAttributes = new { @class = "col-xs-2" } })
                                            @Html.ValidationMessageFor(model => model.PurchaseItem, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="">
                                            @Html.Label("FixedAsset Item", htmlAttributes: new { @class = "control-label col-xs-2" })
                                            @Html.EditorFor(model => model.FixedAssetItem, new { htmlAttributes = new { @class = "col-xs-2" } })
                                            @Html.ValidationMessageFor(model => model.FixedAssetItem, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="form-group">
                                        <div class="">
                                            @Html.Label("Is Taxable?", htmlAttributes: new { @class = "control-label col-xs-2" })
                                            @Html.EditorFor(model => model.IsTaxable, new { htmlAttributes = new { @class = "col-xs-2" } })
                                            @Html.ValidationMessageFor(model => model.IsTaxable, "", new { @class = "text-danger" })
                                        </div>
                                        <script>
                                            $("#@Html.IdFor(a => a.IsTaxable)").on("change",
                                                function() {
                                                    if (document.getElementById('@Html.IdFor(a => a.IsTaxable)')
                                                        .checked) {
                                                        $("#taxDdl").show();
                                                    } else {
                                                        $("#taxDdl").hide();
                                                    }
                                                });
                                        </script>
                                        <div class="col-md-4" style="display: none" id="taxDdl">
                                            @Html.LabelFor(a => a.TaxId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.TaxId, Model.TaxDdl, "Select an Option", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.TaxId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-lg btnPro"><span class="fa fa-send"></span>Save</button>
                    <button type="button" class="btn btn-default btn-lg btnPro1" @*data-dismiss="modal"*@ onclick="$('#ordine').modal('hide'); removeElements = (elms) => [...elms].forEach(el => el.remove());removeElements( document.querySelectorAll('.modal-backdrop') );"><span class="fa fa-close"></span>Close</button>
                </div>
            </div>
        </div>
    }

    <div id="ModalData1"></div>
    <div id="ModalData2"></div>
    <div id="ModalData3"></div>

    <script>
        var fired = false;
        function UpdateDdlCategory() {
            $.ajax({
                url: "@Url.Action("GetProductCategoryDdl", "Products")",
                type: 'GET',
                cache: false,
                success: function (result) {
                    var $dropdown = $("#@Html.IdFor(a=>a.CategoryId)");
                    $dropdown.empty();
                    $dropdown.append($("<option />").val('').text("Select an Option"));
                    $.each(result, function (index, value) {
                        $dropdown.append($("<option />").val(value.Id).text(value.Name));
                    });

                }
            });

        }
        $('a.modalShow1').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $.blockUI({ css: { backgroundColor: '#fff', color: '#0aaa5a' } });
            if (!fired) {
                //mark as fired
                fired = true;
                $.ajax({
                    url: this.href,
                    type: 'GET',
                    success: function (result) {
                        $('#ModalData1').html(result);
                        $('#ordine2').modal('show');
                        $.unblockUI();
                        fired = false;
                    }
                });
            }
            else {}

            return false;
        });

        function UpdateDdlSection() {
            $.ajax({
                url: "@Url.Action("GetSectionDdl", "Products")",
                type: 'GET',
                cache: false,
                success: function (result) {
                    var $dropdown = $("#@Html.IdFor(a=>a.SectionId)");
                    $dropdown.empty();
                    $dropdown.append($("<option />").val('').text("Select an Option"));
                    $.each(result, function (index, value) {
                        $dropdown.append($("<option />").val(value.Id).text(value.Name));
                    });

                }
            });
        }



        $('a.modalShow3').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $.blockUI({ css: { backgroundColor: '#fff', color: '#0aaa5a' } });
            if (!fired) {
                //mark as fired
                fired = true;
                $.ajax({
                    url: this.href,
                    type: 'GET',
                    success: function (result) {
                        $('#ModalData3').html(result);
                        $('#ordine3').modal('show');
                        $.unblockUI();
                        fired = false;
                    }
                });
            } else {}

            return false;
        });
        function UpdateDdlUnit() {
            $.ajax({
                url: "@Url.Action("GetUnitDdl", "Setup")",
                type: 'GET',
                cache: false,
                success: function (result) {
                    var $dropdown = $("#@Html.IdFor(a=>a.UnitId)");
                    $dropdown.empty();
                    $dropdown.append($("<option />").val('').text("Select an Option"));
                    $.each(result, function (index, value) {
                        $dropdown.append($("<option />").val(value.Id).text(value.Name));
                    });

                }
            });
        }
        $('a.modalShow4').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $.blockUI({ css: { backgroundColor: '#fff', color: '#0aaa5a' } });
            if (!fired) {
                //mark as fired
                fired = true;
                $.ajax({
                    url: this.href,
                    type: 'GET',
                    success: function (result) {
                        $('#ModalData2').html(result);
                        $('#ordine2').modal('show');
                        $.unblockUI();
                        fired = false;
                    }
                });
            } else {}

            return false;
        });
        function UpdateDdlSize() {
            $.ajax({
                url: "@Url.Action("GetSizeDdl", "Setup")",
                type: 'GET',
                cache: false,
                success: function (result) {
                    var $dropdown = $("#@Html.IdFor(a=>a.Size)");
                    $dropdown.empty();
                    $dropdown.append($("<option />").val('').text("Select an Option"));
                    $.each(result, function (index, value) {
                        $dropdown.append($("<option />").val(value.Name).text(value.Name));
                    });

                }
            });
        }
        $('a.modalShow5').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $.blockUI({ css: { backgroundColor: '#fff', color: '#0aaa5a' } });
            if (!fired) {
                //mark as fired
                fired = true;
                $.ajax({
                    url: this.href,
                    type: 'GET',
                    success: function (result) {
                        $('#ModalData2').html(result);
                        $('#ordine2').modal('show');
                        $.unblockUI();
                        fired = false;
                    }
                });
            } else { }

            return false;
        });
        $('#datatable-default').dataTable();
    </script>
</div>




           

        


    


