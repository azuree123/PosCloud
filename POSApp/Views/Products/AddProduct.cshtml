@using POSApp.Core.Enums
@model POSApp.Core.ViewModels.ProductCreateViewModel

@{
    Layout = null;
}

<div id="ordine" class="modal fade" role="dialog">
    @{ string s = ViewBag.edit;}

    @using (Html.BeginForm(s, "Products", FormMethod.Post, new {enctype = "multipart/form-data"}))
    {
        @Html.AntiForgeryToken()
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content ">
                <div class="modal-header modalheader">
                    <button type="button" class="close modalheader" data-dismiss="modal">×</button>

                    @if (s.Contains("Add"))
                    {
                        <h4 class="modal-title">
                            Add Product
                        </h4>
                    }
                    else
                    {
                        <h4 class="modal-title">
                            Edit Product
                        </h4>
                    }


                </div>
                <div class="modal-body">
                    <div class="panel panel-bd lobidrag">

                        <div class="panel-body">

                            @Html.HiddenFor(a => a.Id)
                            @Html.HiddenFor(a => a.CreatedBy)
                            @Html.HiddenFor(a => a.CreatedOn)
                            @Html.HiddenFor(a=>a.Image)
                            @Html.HiddenFor(a=>a.StoreId)
                            <div class="">
                                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                                <div class="row">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                   
                                        @*<div class="col-md-4">
                                            @Html.LabelFor(model => model.ProductCode, htmlAttributes: new {@class = "control-label"})
                                            @Html.EditorFor(model => model.ProductCode, new {htmlAttributes = new {@class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.ProductCode, "", new {@class = "text-danger"})
                                        </div>*@
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Tax, new {htmlAttributes = new {@class = "form-control", @required = true}})
                                            @Html.ValidationMessageFor(model => model.Tax, "", new {@class = "text-danger"})
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group ">
                                   
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.CategoryId, Model.CategoryDdl, "Select an Option", new {htmlAttributes = new {@class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.CategoryId, "", new {@class = "text-danger"})
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Available, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(a => a.Available, new SelectList(Enum.GetValues(typeof(Available))), "Select Gender", new { @class = "form-control", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.Available, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.SupplierId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.SupplierId, Model.SupplierDdl, "Select an Option", new {htmlAttributes = new {@class = "form-control", @required = true } })
                                            @Html.ValidationMessageFor(model => model.SupplierId, "", new {@class = "text-danger"})
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="form-group">
                                   
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.UnitPrice, new {htmlAttributes = new {@class = "form-control", @required = true}})
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new {@class = "text-danger"})
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Barcode, htmlAttributes: new {@class = "control-label"})
                                            @Html.EditorFor(model => model.Barcode, new {htmlAttributes = new {@class = "form-control"}})
                                            @Html.ValidationMessageFor(model => model.Barcode, "", new {@class = "text-danger"})
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group">

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label" })
                                            <input type="file" name="file" id="file" />
                                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-lg btnPro"><span class="fa fa-send"></span>Save</button>
                    <button type="button" class="btn btn-default btn-lg btnPro1" data-dismiss="modal"><span class="fa fa-close"></span>Close</button>
                </div>
            </div>
        </div>
    }
</div>

           

        


    


