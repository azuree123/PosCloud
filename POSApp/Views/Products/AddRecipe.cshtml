
@using POSApp.Core.Enums
@model POSApp.Core.ViewModels.RecipeViewModel

@{
    Layout = null;
    @Styles.Render("~/Content/css")
}   @Scripts.Render("~/bundles/vendor")

<div id="ordine" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    @{ string s = ViewBag.edit;}

    @using (Html.BeginForm(s, "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content ">
                <div class="modal-header modalheader">
                    <button type="button" class="close modalheader" data-dismiss="modal">×</button>

                    @if (s.Contains("Add"))
                    {
                        <h4 class="modal-title">
                            Add Recipe
                        </h4>
                    }
                    else
                    {
                        <h4 class="modal-title">
                            Edit Recipe
                        </h4>
                    }


                </div>
                <div class="modal-body">
                    <div class="panel panel-bd lobidrag">

                        <div class="panel-body">

                            @Html.HiddenFor(a => a.Id)
                            @Html.HiddenFor(a => a.CreatedBy)
                            @Html.HiddenFor(a => a.CreatedOn)
                            
                            <div class="row">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <input type="hidden" id="productsDispaly" value="@Model.ProductsDisplay" />
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label required1" })
                                    <div class="">
                                        @Html.DropDownListFor(model => model.Products, Model.ProductDDl, null, new { @class = "form-control", @required = "true", @multiple = "multiple" })
                                        @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })

                                        <input type="checkbox" onclick="Select_All($(this).prop('checked'), '@Html.IdFor(a=>a.Products)');" />
                                        Select All
                                    </div>

                                </div>
                                <table id="myTable">
                                    <tr>
                                        <td>Row1 cell1</td>
                                        <td>Row1 cell2</td>
                                        <td>Row1 cell3</td>
                                    </tr>
                                    <button onclick="myCreateFunction()">Create row</button>
                                    <button onclick="myDeleteFunction()">Delete row</button>
  
                                </table>
                                <input type="hidden" id="productsDispaly" value="@Model.ProductsDisplay" />
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.IngredientCode, htmlAttributes: new { @class = "control-label required1" })
                                    <div class="">
                                        @Html.DropDownListFor(model => model.Products, Model.RecipeProductDDl, null, new { @class = "form-control", @required = "true", @multiple = "multiple" })
                                        @Html.ValidationMessageFor(model => model.IngredientCode, "", new { @class = "text-danger" })

                                        <input type="checkbox" onclick="Select_All($(this).prop('checked'), '@Html.IdFor(a=>a.Products)');" />
                                        Select All
                                    </div>

                                </div>
                                <div class="form-group">
                                    
                                        @Html.LabelFor(model => model.UnitId, htmlAttributes: new { @class = "control-label required1" })
                                        <div class="input-group">
                                            @Html.DropDownListFor(model => model.UnitId, Model.UnitDdl, "Select an Option", new { @class = "form-control", @required = true, autofocus = "" })
                                            
                                            @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                                        </div>
                                    
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Calories, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Calories, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Calories, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-lg btnPro">Save</button>
                    <button type="button" class="btn btn-default btn-lg btnPro1" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    }
</div>



<script>


    $("#@Html.IdFor(a=>a.Products)").select2();


    function Select_All(a, b) {
        if (a){
            $("#"+b+" > option").prop("selected","selected");
            $("#" + b +"").trigger("change");
        }else{
            $("#" + b +"").val("");
            $("#" + b +"").trigger("change");
        }
    }

    $(document).ready(function () {



        selectedValues = $('#productsDispaly').val().split(',');
        $('#@Html.IdFor(a=>a.Products)').val(selectedValues).trigger("change");







    });

</script>
<script>
    $("input").on("keypress", function (e) {
        if (e.which === 32 && !this.value.length)
            e.preventDefault();
    });
</script>
<script>
    function myCreateFunction() {
        var table = document.getElementById("myTable");
        var row = table.insertRow(0);
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(0);
        var cell3 = row.insertCell(1);
        cell1.innerHTML =
            " @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label" }) + @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })";
            
                                    
        
            
            
                                            
        
           
                                    
            
        cell2.innerHTML = "NEW CELL2";
        cell3.innerHTML = "NEW CELL3";
    }

    function myDeleteFunction() {
        document.getElementById("myTable").deleteRow(0);
    }
</script>
@Html.Raw(ViewBag.alert)

























