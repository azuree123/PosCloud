@model POSApp.Core.ViewModels.TillOperationViewModel

@{
    Layout = null;
}
<div id="ordine" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    @{ string s = ViewBag.edit;}

    @using (Html.BeginForm(s, "Setup", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content ">
                <div class="modal-header modalheader">
                    <button type="button" class="close modalheader" data-dismiss="modal">×</button>

                    @if (s.Contains("Add"))
                    {
                        <h4 class="modal-title">
                            AddTillOperation
                        </h4>
                    }
                    else
                    {
                        <h4 class="modal-title">
                            Edit TillOperation
                        </h4>
                    }


                </div>
                <div class="modal-body">
                    <div class="panel panel-bd lobidrag">

                        <div class="panel-body">

                            @Html.HiddenFor(a => a.Id)
                            @Html.HiddenFor(a => a.ApplicationUserId)
                            @Html.HiddenFor(a => a.CreatedBy)
                            @Html.HiddenFor(a => a.CreatedOn)
                            @Html.HiddenFor(a => a.StoreId)
                            <div class="">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                <div class="row">
                                    <div class="form-group">

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.OperationDate, htmlAttributes: new { @class = "control-label " })
                                            @Html.EditorFor(model => model.OperationDate, new { htmlAttributes = new { @class = "form-control unstyled",@required="true", autofocus = "" } })
                                            @Html.ValidationMessageFor(model => model.OperationDate, "", new { @class = "text-danger" })
                                        </div>
                                        <input type="hidden" id="OperationDate_date" value="@Model.OperationDate"/>
                                        <div class="col-md-4">
                                            @Html.Label("Select Shift", htmlAttributes: new { @class = "control-label " })
                                            @Html.DropDownListFor(model => model.ShiftId, Model.ShiftDdl, "Select a Shift", new { @class = "form-control", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.ShiftId, "", new { @class = "text-danger" })

                                        </div>

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.OpeningAmount, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.OpeningAmount, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                            @Html.ValidationMessageFor(model => model.OpeningAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group">

                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.SystemAmount, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.SystemAmount, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                            @Html.ValidationMessageFor(model => model.SystemAmount, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.PhysicalAmount, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.PhysicalAmount, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                            @Html.ValidationMessageFor(model => model.PhysicalAmount, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.TillOperationType, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.TillOperationType, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TillOperationType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label " })

                                            @Html.CheckBoxFor(model => model.Status)
                                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                                        </div>
                                    </div>

                                </div>

                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-default btn-lg btnPro"><span class="fa fa-send"></span>@POSApp.Resources.Resource.Save</button>
                        <button type="button" class="btn btn-default btn-lg btnPro1" data-dismiss="modal"><span class="fa fa-close"></span>@POSApp.Resources.Resource.Close</button>
                    </div>
                </div>
            </div>
            }

        </div>
    }
    <div id="ModalData1"></div>
    <script>
        @*function UpdateDdlDineTable() {
            $.ajax({
                url: "@Url.Action("GetDineTableDdl", "Setup")",
                type: 'GET',
                cache: false,
                success: function (result) {
                    var $dropdown = $("#@Html.IdFor(a=>a.FloorId)");
                    $dropdown.empty();
                    $dropdown.append($("<option />").val('').text("Select an Option"));
                    $.each(result, function (index, value) {
                        $dropdown.append($("<option />").val(value.Id).text(value.Name));
                    });

                }
            });

        }*@

        $('a.modalShow1').on('click', function () {
            $.blockUI({ css: { backgroundColor: '#fff', color: '#0aaa5a' } }); 
            $.ajax({
                url: this.href,
                type: 'GET',
                success: function(result) {
                    $('#ModalData1').html(result);
                    $('#ordine2').modal('show');
                    $.unblockUI();
                }
            });

            return false;
        });

    </script>
</div>

<script>
    $(document).ready(function () {
        var date = $('#OperationDate_date').val();
        if (date !== '1/1/0001 12:00:00 AM' && date!=='') {
            var displayDate = new Date(date);
            displayDate.setDate(displayDate.getDate()+1);
            document.getElementById("@Html.IdFor(a=>a.OperationDate)").valueAsDate = displayDate;
        }


      
    });

</script>
<script>
    $("input").on("keypress", function (e) {
        if (e.which === 32 && !this.value.length)
            e.preventDefault();
    });
</script>









